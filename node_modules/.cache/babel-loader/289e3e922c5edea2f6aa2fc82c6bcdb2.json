{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nunopereira/Desktop/js/react/project/src/components/Persons/Person/Person.js\";\nimport React, { Component } from 'react';\nimport classes from './person.module.css';\nimport Aux from '../../../hoc/Aux.js';\nimport withClass from '../../../hoc/withClass';\n\nclass Person extends Component {\n  conponentDidMount() {\n    console.log(\"[Person.js] conponentDidMount...\"); // this.inputElement.focus();\n\n    document.querySelector('input').focus();\n  }\n\n  render() {\n    console.log(\"[Person.js] rendering...\");\n    return (\n      /*#__PURE__*/\n      // style vai dar override as css rules que tenho definidas para Person. O css faz isso e nao o radium\n      // <div className={classes.Person}>\n      // or use React.Fragment after importing Fragment from react. Its the same. Aux.js is how Fragment works under the hood\n      _jsxDEV(Aux, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: this.props.clicked,\n          children: [\"Im a person with name: \", this.props.name, \" and age: \", this.props.age]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.props.children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: this.props.changed,\n          value: this.props.name,\n          ref: inputEl => {\n            this.inputElement = inputEl;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this)\n      /* </div> */\n\n    );\n  }\n\n}\n\nexport default _c = withClass(Person, classes.Person);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/nunopereira/Desktop/js/react/project/src/components/Persons/Person/Person.js"],"names":["React","Component","classes","Aux","withClass","Person","conponentDidMount","console","log","document","querySelector","focus","render","props","clicked","name","age","children","changed","inputEl","inputElement"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;;AAEA,MAAMC,MAAN,SAAqBJ,SAArB,CAA+B;AAC3BK,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EADgB,CAEhB;;AACAC,IAAAA,QAAQ,CAACC,aAAT,CAAuB,OAAvB,EAAgCC,KAAhC;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACLL,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA;AAAA;AACI;AAEA;AAEA;AACA,cAAC,GAAD;AAAA,gCACI;AAAG,UAAA,OAAO,EAAE,KAAKK,KAAL,CAAWC,OAAvB;AAAA,gDAC4B,KAAKD,KAAL,CAAWE,IADvC,gBACuD,KAAKF,KAAL,CAAWG,GADlE;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAA,oBAAI,KAAKH,KAAL,CAAWI;AAAf;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AACI,UAAA,IAAI,EAAC,MADT;AAEI,UAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWK,OAFzB;AAGI,UAAA,KAAK,EAAE,KAAKL,KAAL,CAAWE,IAHtB;AAII,UAAA,GAAG,EAAGI,OAAD,IAAa;AAAC,iBAAKC,YAAL,GAAoBD,OAApB;AAA4B;AAJnD;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;;AAjBJ;AAmBH;;AA5B0B;;AA+B/B,oBAAef,SAAS,CAACC,MAAD,EAASH,OAAO,CAACG,MAAjB,CAAxB","sourcesContent":["import React, {Component} from 'react';\nimport classes from './person.module.css';\nimport Aux from '../../../hoc/Aux.js';\nimport withClass from '../../../hoc/withClass';\n \nclass Person extends Component {\n    conponentDidMount() {\n        console.log(\"[Person.js] conponentDidMount...\");\n        // this.inputElement.focus();\n        document.querySelector('input').focus();\n    }\n    \n    render() {\n        console.log(\"[Person.js] rendering...\");\n        return (\n            // style vai dar override as css rules que tenho definidas para Person. O css faz isso e nao o radium\n            \n            // <div className={classes.Person}>\n            \n            // or use React.Fragment after importing Fragment from react. Its the same. Aux.js is how Fragment works under the hood\n            <Aux>\n                <p onClick={this.props.clicked}>\n                    Im a person with name: {this.props.name} and age: {this.props.age}\n                </p>\n                <p>{this.props.children}</p>\n                <input \n                    type=\"text\" \n                    onChange={this.props.changed} \n                    value={this.props.name}\n                    ref={(inputEl) => {this.inputElement = inputEl}}/>\n            </Aux>\n            /* </div> */\n        )\n    }\n}\n\nexport default withClass(Person, classes.Person);  "]},"metadata":{},"sourceType":"module"}