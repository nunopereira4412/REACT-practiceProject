{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nunopereira/Desktop/js/react/project/src/components/Persons/Persons.js\";\nimport React, { Component } from 'react';\nimport Person from './Person/Person';\n\nclass Persons extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    console.log(\"[Persons.js] getDerivedStateFromProps...\");\n    return state;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(\"[Persons.js] shouldComponentUpdate...\");\n    if (nextProps.persons !== this.props.persons || nextProps.clicked !== this.props.clicked || nextProps.changed !== this.props.changed) return true;else return false;\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.log(\"[Persons.js] getSnapshotBeforeUpdate...\");\n    return {\n      message: \"Snapshot!\"\n    };\n  }\n\n  componentDidUpdate(prevProp, prevState, snapshot) {\n    console.log(\"[Persons.js] componentDidUpdate...\");\n    console.log(snapshot);\n  } // run any code before the component is removed from the DOM\n\n\n  componentWillUnmount() {\n    console.log(\"[Persons.js] componentWillUnmount...\");\n  }\n\n  render() {\n    console.log(\"[Persons.js] rendering...\");\n    return this.props.persons.map((person, personIndex) => /*#__PURE__*/_jsxDEV(Person, {\n      clicked: personIndex => this.props.clicked(personIndex),\n      name: person.name,\n      age: person.age // key is used by react to compare future elements with past elements and then only re-render the elements that changed - efficiency\n      // index isnt a good key cus for every render the indexes change\n      ,\n      changed: event => this.props.changed(event, person.id)\n    }, person.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this));\n  }\n\n}\n\n;\nexport default Persons;","map":{"version":3,"sources":["/Users/nunopereira/Desktop/js/react/project/src/components/Persons/Persons.js"],"names":["React","Component","Person","Persons","state","getDerivedStateFromProps","props","console","log","shouldComponentUpdate","nextProps","nextState","persons","clicked","changed","getSnapshotBeforeUpdate","prevProps","prevState","message","componentDidUpdate","prevProp","snapshot","componentWillUnmount","render","map","person","personIndex","name","age","event","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AAEA,MAAMC,OAAN,SAAsBF,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAE5BG,KAF4B,GAEpB,EAFoB;AAAA;;AAI5B,SAAOC,wBAAP,CAAgCC,KAAhC,EAAuCF,KAAvC,EAA8C;AAC9CG,IAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACI,WAAOJ,KAAP;AACH;;AAEDK,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACxCJ,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACA,QAAGE,SAAS,CAACE,OAAV,KAAsB,KAAKN,KAAL,CAAWM,OAAjC,IACAF,SAAS,CAACG,OAAV,KAAsB,KAAKP,KAAL,CAAWO,OADjC,IAEAH,SAAS,CAACI,OAAV,KAAsB,KAAKR,KAAL,CAAWQ,OAFpC,EAGI,OAAO,IAAP,CAHJ,KAIK,OAAO,KAAP;AACR;;AAEDC,EAAAA,uBAAuB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC1CV,IAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACA,WAAO;AAACU,MAAAA,OAAO,EAAE;AAAV,KAAP;AACH;;AAEDC,EAAAA,kBAAkB,CAACC,QAAD,EAAWH,SAAX,EAAsBI,QAAtB,EAAgC;AAC9Cd,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYa,QAAZ;AACH,GA1B2B,CA4B5B;;;AACAC,EAAAA,oBAAoB,GAAG;AACnBf,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACH;;AAEDe,EAAAA,MAAM,GAAG;AACLhB,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,WAAO,KAAKF,KAAL,CAAWM,OAAX,CAAmBY,GAAnB,CAAuB,CAACC,MAAD,EAASC,WAAT,kBAC9B,QAAC,MAAD;AACI,MAAA,OAAO,EAAGA,WAAD,IAAiB,KAAKpB,KAAL,CAAWO,OAAX,CAAmBa,WAAnB,CAD9B;AAEI,MAAA,IAAI,EAAED,MAAM,CAACE,IAFjB;AAGI,MAAA,GAAG,EAAEF,MAAM,CAACG,GAHhB,CAII;AACA;AALJ;AAOI,MAAA,OAAO,EAAGC,KAAD,IAAW,KAAKvB,KAAL,CAAWQ,OAAX,CAAmBe,KAAnB,EAA0BJ,MAAM,CAACK,EAAjC;AAPxB,OAMSL,MAAM,CAACK,EANhB;AAAA;AAAA;AAAA;AAAA,YADO,CAAP;AAUH;;AA7C2B;;AA8C/B;AAED,eAAe3B,OAAf","sourcesContent":["import React, {Component} from 'react';\nimport Person from './Person/Person';\n\nclass Persons extends Component {\n    \n    state = {};\n\n    static getDerivedStateFromProps(props, state) {\n    console.log(\"[Persons.js] getDerivedStateFromProps...\");\n        return state;\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log(\"[Persons.js] shouldComponentUpdate...\");\n        if(nextProps.persons !== this.props.persons ||\n           nextProps.clicked !== this.props.clicked ||\n           nextProps.changed !== this.props.changed)\n            return true;\n        else return false;\n    }\n\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        console.log(\"[Persons.js] getSnapshotBeforeUpdate...\");\n        return {message: \"Snapshot!\"};\n    }\n    \n    componentDidUpdate(prevProp, prevState, snapshot) {\n        console.log(\"[Persons.js] componentDidUpdate...\");\n        console.log(snapshot);\n    }\n    \n    // run any code before the component is removed from the DOM\n    componentWillUnmount() {\n        console.log(\"[Persons.js] componentWillUnmount...\");\n    }\n\n    render() {\n        console.log(\"[Persons.js] rendering...\");\n        return this.props.persons.map((person, personIndex) => (\n        <Person\n            clicked={(personIndex) => this.props.clicked(personIndex)}\n            name={person.name} \n            age={person.age} \n            // key is used by react to compare future elements with past elements and then only re-render the elements that changed - efficiency\n            // index isnt a good key cus for every render the indexes change\n            key={person.id}\n            changed={(event) => this.props.changed(event, person.id)}/>\n        ))\n    }\n};\n\nexport default Persons;\n\n"]},"metadata":{},"sourceType":"module"}