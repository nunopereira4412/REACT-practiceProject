{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nunopereira/Desktop/js/react/project/src/components/Persons/Persons.js\";\nimport React from 'react';\nimport Person from './Person/Person';\n\nconst persons = props => props.persons.map((person, personIndex) => /*#__PURE__*/_jsxDEV(Person, {\n  clicked: () => this.deletePersonHandler(personIndex),\n  name: person.name,\n  age: person.age // key is used by react to compare future elements with past elements and then only re-render the elements that changed - efficiency\n  // index isnt a good key cus for every render the indexes change\n  ,\n  changed: event => this.nameChangedHandler(event, person.id)\n}, person.id, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 5\n}, this));\n\nexport default persons;","map":{"version":3,"sources":["/Users/nunopereira/Desktop/js/react/project/src/components/Persons/Persons.js"],"names":["React","Person","persons","props","map","person","personIndex","deletePersonHandler","name","age","event","nameChangedHandler","id"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAWA,KAAK,CAACD,OAAN,CAAcE,GAAd,CAAkB,CAACC,MAAD,EAASC,WAAT,kBACzC,QAAC,MAAD;AACI,EAAA,OAAO,EAAE,MAAM,KAAKC,mBAAL,CAAyBD,WAAzB,CADnB;AAEI,EAAA,IAAI,EAAED,MAAM,CAACG,IAFjB;AAGI,EAAA,GAAG,EAAEH,MAAM,CAACI,GAHhB,CAII;AACA;AALJ;AAOI,EAAA,OAAO,EAAGC,KAAD,IAAW,KAAKC,kBAAL,CAAwBD,KAAxB,EAA+BL,MAAM,CAACO,EAAtC;AAPxB,GAMSP,MAAM,CAACO,EANhB;AAAA;AAAA;AAAA;AAAA,QADuB,CAA3B;;AAYA,eAAeV,OAAf","sourcesContent":["import React from 'react';\nimport Person from './Person/Person';\n\nconst persons = (props) => props.persons.map((person, personIndex) => (\n    <Person\n        clicked={() => this.deletePersonHandler(personIndex)}\n        name={person.name} \n        age={person.age} \n        // key is used by react to compare future elements with past elements and then only re-render the elements that changed - efficiency\n        // index isnt a good key cus for every render the indexes change\n        key={person.id}\n        changed={(event) => this.nameChangedHandler(event, person.id)}/>\n    ))\n;\n\nexport default persons;\n\n"]},"metadata":{},"sourceType":"module"}