{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nunopereira/Desktop/js/react/project/src/components/Persons/Persons.js\";\nimport React, { Component } from 'react';\nimport Person from './Person/Person';\n\nclass Persons extends Component {\n  static getDerivedStateFromProps(props, state) {\n    console.log(\"[Persons.js] getDerivedStateFromProps...\");\n    return state;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(\"[Persons.js] shouldComponentUpdate...\");\n    return true;\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.log(\"[Persons.js] getSnapshotBeforeUpdate...\");\n    return {\n      message: \"Snapshot!\"\n    };\n  }\n\n  componentDidUpdate(prevProp, prevState, snapShot) {\n    console.log(\"[Persons.js] componentDidUpdate...\");\n    return snapShot;\n  }\n\n  render() {\n    console.log(\"[Persons.js] rendering...\");\n    return this.props.persons.map((person, personIndex) => /*#__PURE__*/_jsxDEV(Person, {\n      clicked: personIndex => this.props.clicked(personIndex),\n      name: person.name,\n      age: person.age // key is used by react to compare future elements with past elements and then only re-render the elements that changed - efficiency\n      // index isnt a good key cus for every render the indexes change\n      ,\n      changed: event => this.props.changed(event, person.id)\n    }, person.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this));\n  }\n\n}\n\n;\nexport default Persons;","map":{"version":3,"sources":["/Users/nunopereira/Desktop/js/react/project/src/components/Persons/Persons.js"],"names":["React","Component","Person","Persons","getDerivedStateFromProps","props","state","console","log","shouldComponentUpdate","nextProps","nextState","getSnapshotBeforeUpdate","prevProps","prevState","message","componentDidUpdate","prevProp","snapShot","render","persons","map","person","personIndex","clicked","name","age","event","changed","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AAEA,MAAMC,OAAN,SAAsBF,SAAtB,CAAgC;AAE5B,SAAOG,wBAAP,CAAgCC,KAAhC,EAAuCC,KAAvC,EAA8C;AAC9CC,IAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACI,WAAOF,KAAP;AACH;;AAEDG,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACxCJ,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACA,WAAO,IAAP;AACH;;AAEDI,EAAAA,uBAAuB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC1CP,IAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACA,WAAO;AAACO,MAAAA,OAAO,EAAE;AAAV,KAAP;AACH;;AAEDC,EAAAA,kBAAkB,CAACC,QAAD,EAAWH,SAAX,EAAsBI,QAAtB,EAAgC;AAC9CX,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACA,WAAOU,QAAP;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACLZ,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,WAAO,KAAKH,KAAL,CAAWe,OAAX,CAAmBC,GAAnB,CAAuB,CAACC,MAAD,EAASC,WAAT,kBAC9B,QAAC,MAAD;AACI,MAAA,OAAO,EAAGA,WAAD,IAAiB,KAAKlB,KAAL,CAAWmB,OAAX,CAAmBD,WAAnB,CAD9B;AAEI,MAAA,IAAI,EAAED,MAAM,CAACG,IAFjB;AAGI,MAAA,GAAG,EAAEH,MAAM,CAACI,GAHhB,CAII;AACA;AALJ;AAOI,MAAA,OAAO,EAAGC,KAAD,IAAW,KAAKtB,KAAL,CAAWuB,OAAX,CAAmBD,KAAnB,EAA0BL,MAAM,CAACO,EAAjC;AAPxB,OAMSP,MAAM,CAACO,EANhB;AAAA;AAAA;AAAA;AAAA,YADO,CAAP;AAUH;;AAlC2B;;AAmC/B;AAED,eAAe1B,OAAf","sourcesContent":["import React, {Component} from 'react';\nimport Person from './Person/Person';\n\nclass Persons extends Component {\n\n    static getDerivedStateFromProps(props, state) {\n    console.log(\"[Persons.js] getDerivedStateFromProps...\");\n        return state;\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log(\"[Persons.js] shouldComponentUpdate...\");\n        return true;\n    }\n\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        console.log(\"[Persons.js] getSnapshotBeforeUpdate...\");\n        return {message: \"Snapshot!\"};\n    }\n    \n    componentDidUpdate(prevProp, prevState, snapShot) {\n        console.log(\"[Persons.js] componentDidUpdate...\");\n        return snapShot;\n    }\n\n    render() {\n        console.log(\"[Persons.js] rendering...\");\n        return this.props.persons.map((person, personIndex) => (\n        <Person\n            clicked={(personIndex) => this.props.clicked(personIndex)}\n            name={person.name} \n            age={person.age} \n            // key is used by react to compare future elements with past elements and then only re-render the elements that changed - efficiency\n            // index isnt a good key cus for every render the indexes change\n            key={person.id}\n            changed={(event) => this.props.changed(event, person.id)}/>\n        ))\n    }\n};\n\nexport default Persons;\n\n"]},"metadata":{},"sourceType":"module"}