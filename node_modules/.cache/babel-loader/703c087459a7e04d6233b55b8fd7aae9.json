{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nunopereira/Desktop/js/react/project/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Person from './Person/Person';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      persons: [{\n        id: \"sdfsdf\",\n        name: \"Max\",\n        age: 28\n      }, {\n        id: \"whgesfdv\",\n        name: \"Mane\",\n        age: 29\n      }, {\n        id: \"wetragds\",\n        name: \"Stephanie\",\n        age: 16\n      }],\n      otherState: \"this is other state\",\n      showPersons: false\n    };\n\n    this.togglePersonsHandler = () => {\n      const showPersons = this.state.showPersons;\n      this.setState({\n        showPersons: !showPersons\n      });\n    };\n\n    this.nameChangedHandler = (event, personId) => {\n      const personIndex = this.state.persons.findIndex(p => p.id === personId);\n      const person = { ...this.state.persons[personIndex]\n      }; // OR\n      // const person = Object.assign({}, ...this.state.persons[personIndex]);\n\n      person.name = event.target.value;\n      const persons = [...this.state.persons];\n      persons[personIndex] = person;\n      this.setState({\n        persons: persons\n      });\n    };\n\n    this.deletePersonHandler = personIndex => {\n      // without the slice we would be mutating the oritignal state. This may lead to unpredictable apps\n      //const persons = this.state.persons.slice();\n      // OR\n      //returns an object with the elements from the oritignal \n      const persons = [...this.state.persons];\n      persons.splice(personIndex, 1);\n      this.setState({\n        persons: persons\n      });\n    };\n  }\n\n  render() {\n    const style = {\n      backgroundColor: \"white\",\n      font: \"inherit\",\n      border: \"1px solid blue\",\n      padding: \"8px\",\n      cursor: \"pointer\"\n    };\n    let inputLength = 0;\n    let persons = null;\n\n    const setInputLength = event => {\n      return event.target.value.length;\n    };\n\n    if (this.state.showPersons) {\n      persons = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.persons.map((person, personIndex) => {\n          return /*#__PURE__*/_jsxDEV(Person, {\n            click: () => this.deletePersonHandler(personIndex),\n            name: person.name,\n            age: person.age // key is used by react to compare future elements with past elements and then only re-render the elements that changed - efficiency\n            // index isnt a good key cus for every render the indexes change\n            ,\n            changed: event => this.nameChangedHandler(event, person.id)\n          }, person.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this);\n    }\n\n    return (\n      /*#__PURE__*/\n      // this is some jsx\n      _jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"HI --- TEST\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"p\",\n          children: \"this is rly working\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: style,\n          onClick: this.togglePersonsHandler,\n          children: \"Switch name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }, this), persons, /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: event => this.setInputLength(event)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: inputLength\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }, this) //its the same as:\n      // return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Does this work now?')\n\n    );\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nunopereira/Desktop/js/react/project/src/App.js"],"names":["React","Component","Person","App","state","persons","id","name","age","otherState","showPersons","togglePersonsHandler","setState","nameChangedHandler","event","personId","personIndex","findIndex","p","person","target","value","deletePersonHandler","splice","render","style","backgroundColor","font","border","padding","cursor","inputLength","setInputLength","length","map"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport './App.css'\nimport Person from './Person/Person'\n\n\nclass App extends Component {\n  state = {\n    persons: [\n      {id: \"sdfsdf\", name: \"Max\", age: 28},\n      {id: \"whgesfdv\", name: \"Mane\", age: 29},\n      {id: \"wetragds\", name: \"Stephanie\", age: 16}\n    ],\n    otherState: \"this is other state\",\n    showPersons: false,\n  \n  }\n\n  togglePersonsHandler = () => {\n    const showPersons = this.state.showPersons;\n    this.setState({ showPersons: !showPersons });\n  }\n\n  nameChangedHandler = (event, personId) => {\n    const personIndex = this.state.persons.findIndex(p => p.id === personId);\n  \n    const person = {...this.state.persons[personIndex]};\n    // OR\n    // const person = Object.assign({}, ...this.state.persons[personIndex]);\n    person.name = event.target.value;\n\n    const persons = [...this.state.persons];\n    persons[personIndex] = person;\n\n    this.setState({persons: persons});\n  }\n\n  deletePersonHandler = (personIndex) => {     \n    // without the slice we would be mutating the oritignal state. This may lead to unpredictable apps\n\n    //const persons = this.state.persons.slice();\n\n    // OR\n    //returns an object with the elements from the oritignal \n    const persons = [...this.state.persons];\n\n    persons.splice(personIndex, 1);\n    this.setState({persons: persons});\n  }\n\n\n\n  render() {\n    const style = {\n      backgroundColor: \"white\",\n      font: \"inherit\",\n      border: \"1px solid blue\",\n      padding: \"8px\",\n      cursor: \"pointer\"\n    };\n\n    let inputLength = 0;\n    let persons = null;\n\n    const setInputLength = (event) => {\n      return event.target.value.length;\n    }\n\n    if(this.state.showPersons) { \n      persons = (\n        <div>\n          {/* 1. map offers each element in the array asweel as its index if i want\n          2. this will in the end be an array of jsx elements but react will pull out those elements from the array and render them into the screeen */}\n          {this.state.persons.map((person, personIndex) => {\n            return (\n              <Person\n              click={() => this.deletePersonHandler(personIndex)}\n              name={person.name} \n              age={person.age} \n              // key is used by react to compare future elements with past elements and then only re-render the elements that changed - efficiency\n              // index isnt a good key cus for every render the indexes change\n              key={person.id}\n              changed={(event) => this.nameChangedHandler(event, person.id)}/>\n            )\n          })}\n        </div>\n      );  \n    }\n\n    return (\n      // this is some jsx\n      <div className=\"App\">\n        <h1>HI --- TEST</h1>\n        <p className=\"p\">this is rly working</p>\n        {/* <button onClick={() => this.switchNameHandler(\"Maximilian\")}>Switch name</button> */}\n        <button\n          style={style}\n          onClick={this.togglePersonsHandler}>Switch name\n        </button>\n        {persons}\n        <input type=\"text\" onChange={(event) => this.setInputLength(event)}></input>\n        <p>{inputLength}</p>\n      </div>\n      //its the same as:\n        // return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Does this work now?')\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}