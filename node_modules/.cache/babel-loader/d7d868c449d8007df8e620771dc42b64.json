{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nunopereira/Desktop/js/react/project/src/components/Persons/Persons.js\";\nimport React, { PureComponent } from 'react';\nimport Person from './Person/Person'; // PureComponent already implements a shouldComponentUpdate that checks for updates on all the properties this receives. This way i can save some code\n\nclass Persons extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    console.log(\"[Persons.js] getDerivedStateFromProps...\");\n    return state;\n  } // shouldComponentUpdate(nextProps, nextState) {\n  //     console.log(\"[Persons.js] shouldComponentUpdate...\");\n  //     if(nextProps.persons !== this.props.persons ||\n  //        nextProps.clicked !== this.props.clicked ||\n  //        nextProps.changed !== this.props.changed)\n  //         return true;\n  //     else return false;\n  // }\n\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.log(\"[Persons.js] getSnapshotBeforeUpdate...\");\n    return {\n      message: \"Snapshot!\"\n    };\n  }\n\n  componentDidUpdate(prevProp, prevState, snapshot) {\n    console.log(\"[Persons.js] componentDidUpdate...\");\n    console.log(snapshot);\n  } // run any code before the component is removed from the DOM\n\n\n  componentWillUnmount() {\n    console.log(\"[Persons.js] componentWillUnmount...\");\n  }\n\n  render() {\n    console.log(\"[Persons.js] rendering...\");\n    return this.props.persons.map((person, personIndex) => /*#__PURE__*/_jsxDEV(Person, {\n      clicked: personIndex => this.props.clicked(personIndex),\n      name: person.name,\n      age: person.age // key is used by react to compare future elements with past elements and then only re-render the elements that changed - efficiency\n      // index isnt a good key cus for every render the indexes change\n      ,\n      changed: event => this.props.changed(event, person.id)\n    }, person.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this));\n  }\n\n}\n\n;\nexport default Persons;","map":{"version":3,"sources":["/Users/nunopereira/Desktop/js/react/project/src/components/Persons/Persons.js"],"names":["React","PureComponent","Person","Persons","state","getDerivedStateFromProps","props","console","log","getSnapshotBeforeUpdate","prevProps","prevState","message","componentDidUpdate","prevProp","snapshot","componentWillUnmount","render","persons","map","person","personIndex","clicked","name","age","event","changed","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,aAAf,QAAmC,OAAnC;AACA,OAAOC,MAAP,MAAmB,iBAAnB,C,CAGA;;AACA,MAAMC,OAAN,SAAsBF,aAAtB,CAAoC;AAAA;AAAA;AAAA,SAEhCG,KAFgC,GAExB,EAFwB;AAAA;;AAIhC,SAAOC,wBAAP,CAAgCC,KAAhC,EAAuCF,KAAvC,EAA8C;AAC9CG,IAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACI,WAAOJ,KAAP;AACH,GAP+B,CAShC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAK,EAAAA,uBAAuB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC1CJ,IAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACA,WAAO;AAACI,MAAAA,OAAO,EAAE;AAAV,KAAP;AACH;;AAEDC,EAAAA,kBAAkB,CAACC,QAAD,EAAWH,SAAX,EAAsBI,QAAtB,EAAgC;AAC9CR,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYO,QAAZ;AACH,GA1B+B,CA4BhC;;;AACAC,EAAAA,oBAAoB,GAAG;AACnBT,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACH;;AAEDS,EAAAA,MAAM,GAAG;AACLV,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,WAAO,KAAKF,KAAL,CAAWY,OAAX,CAAmBC,GAAnB,CAAuB,CAACC,MAAD,EAASC,WAAT,kBAC9B,QAAC,MAAD;AACI,MAAA,OAAO,EAAGA,WAAD,IAAiB,KAAKf,KAAL,CAAWgB,OAAX,CAAmBD,WAAnB,CAD9B;AAEI,MAAA,IAAI,EAAED,MAAM,CAACG,IAFjB;AAGI,MAAA,GAAG,EAAEH,MAAM,CAACI,GAHhB,CAII;AACA;AALJ;AAOI,MAAA,OAAO,EAAGC,KAAD,IAAW,KAAKnB,KAAL,CAAWoB,OAAX,CAAmBD,KAAnB,EAA0BL,MAAM,CAACO,EAAjC;AAPxB,OAMSP,MAAM,CAACO,EANhB;AAAA;AAAA;AAAA;AAAA,YADO,CAAP;AAUH;;AA7C+B;;AA8CnC;AAED,eAAexB,OAAf","sourcesContent":["import React, {PureComponent} from 'react';\nimport Person from './Person/Person';\n\n\n// PureComponent already implements a shouldComponentUpdate that checks for updates on all the properties this receives. This way i can save some code\nclass Persons extends PureComponent {\n    \n    state = {};\n\n    static getDerivedStateFromProps(props, state) {\n    console.log(\"[Persons.js] getDerivedStateFromProps...\");\n        return state;\n    }\n\n    // shouldComponentUpdate(nextProps, nextState) {\n    //     console.log(\"[Persons.js] shouldComponentUpdate...\");\n    //     if(nextProps.persons !== this.props.persons ||\n    //        nextProps.clicked !== this.props.clicked ||\n    //        nextProps.changed !== this.props.changed)\n    //         return true;\n    //     else return false;\n    // }\n\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        console.log(\"[Persons.js] getSnapshotBeforeUpdate...\");\n        return {message: \"Snapshot!\"};\n    }\n    \n    componentDidUpdate(prevProp, prevState, snapshot) {\n        console.log(\"[Persons.js] componentDidUpdate...\");\n        console.log(snapshot);\n    }\n    \n    // run any code before the component is removed from the DOM\n    componentWillUnmount() {\n        console.log(\"[Persons.js] componentWillUnmount...\");\n    }\n\n    render() {\n        console.log(\"[Persons.js] rendering...\");\n        return this.props.persons.map((person, personIndex) => (\n        <Person\n            clicked={(personIndex) => this.props.clicked(personIndex)}\n            name={person.name} \n            age={person.age} \n            // key is used by react to compare future elements with past elements and then only re-render the elements that changed - efficiency\n            // index isnt a good key cus for every render the indexes change\n            key={person.id}\n            changed={(event) => this.props.changed(event, person.id)}/>\n        ))\n    }\n};\n\nexport default Persons;\n\n"]},"metadata":{},"sourceType":"module"}