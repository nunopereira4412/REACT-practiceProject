{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nunopereira/Desktop/js/react/project/src/components/Persons/Person/Person.js\";\nimport React, { Component } from 'react';\nimport classes from './person.module.css';\nimport Aux from '../../../hoc/Aux.js';\nimport withClass from '../../../hoc/withClass';\nimport AuthContext from '../../../context/authContext';\n\nclass Person extends Component {\n  constructor(props) {\n    super(props);\n    this.inputElementRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    console.log(\"[Person.js] componentDidMount...\"); // this.inputElement.focus();\n    // document.querySelector('input').focus();\n\n    this.inputElementRef.current.focus();\n  }\n\n  render() {\n    console.log(\"[Person.js] rendering...\");\n    return (\n      /*#__PURE__*/\n      // style vai dar override as css rules que tenho definidas para Person. O css faz isso e nao o radium\n      // <div className={classes.Person}>\n      // or use React.Fragment after importing Fragment from react. Its the same. Aux.js is how Fragment works under the hood\n      _jsxDEV(Aux, {\n        children: [/*#__PURE__*/_jsxDEV(AuthContext.Consumer, {\n          children: context => {\n            /*#__PURE__*/\n            _jsxDEV(\"p\", {\n              onClick: this.props.clicked,\n              children: [\"Im a person with name: \", this.props.name, \" and age: \", this.props.age]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 25\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.props.children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: this.props.changed,\n          value: this.props.name // o argumento que vou receber \"inputEl\" vai ser uma referencia para o elemento onde estou a meter isto, ou seja, o elemento input\n          // ref={(inputEl) => {this.inputElement = inputEl}}/>\n          ,\n          ref: this.inputElementRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this)\n      /* </div> */\n\n    );\n  }\n\n}\n\nexport default _c = withClass(Person, classes.Person);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/nunopereira/Desktop/js/react/project/src/components/Persons/Person/Person.js"],"names":["React","Component","classes","Aux","withClass","AuthContext","Person","constructor","props","inputElementRef","createRef","componentDidMount","console","log","current","focus","render","context","clicked","name","age","children","changed"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;;AAEA,MAAMC,MAAN,SAAqBL,SAArB,CAA+B;AAC3BM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,eAAL,gBAAuBT,KAAK,CAACU,SAAN,EAAvB;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EADgB,CAEhB;AACA;;AACA,SAAKJ,eAAL,CAAqBK,OAArB,CAA6BC,KAA7B;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACLJ,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA;AAAA;AACI;AAEA;AAEA;AACA,cAAC,GAAD;AAAA,gCACI,QAAC,WAAD,CAAa,QAAb;AAAA,oBACMI,OAAD,IAAa;AACV;AAAA;AAAG,cAAA,OAAO,EAAE,KAAKT,KAAL,CAAWU,OAAvB;AAAA,oDAC4B,KAAKV,KAAL,CAAWW,IADvC,gBACuD,KAAKX,KAAL,CAAWY,GADlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAGH;AALL;AAAA;AAAA;AAAA;AAAA,gBADJ,eAQI;AAAA,oBAAI,KAAKZ,KAAL,CAAWa;AAAf;AAAA;AAAA;AAAA;AAAA,gBARJ,eASI;AACI,UAAA,IAAI,EAAC,MADT;AAEI,UAAA,QAAQ,EAAE,KAAKb,KAAL,CAAWc,OAFzB;AAGI,UAAA,KAAK,EAAE,KAAKd,KAAL,CAAWW,IAHtB,CAII;AACA;AALJ;AAMI,UAAA,GAAG,EAAE,KAAKV;AANd;AAAA;AAAA;AAAA;AAAA,gBATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;;AAxBJ;AA0BH;;AAzC0B;;AA4C/B,oBAAeL,SAAS,CAACE,MAAD,EAASJ,OAAO,CAACI,MAAjB,CAAxB","sourcesContent":["import React, {Component} from 'react';\nimport classes from './person.module.css';\nimport Aux from '../../../hoc/Aux.js';\nimport withClass from '../../../hoc/withClass';\nimport AuthContext from '../../../context/authContext'; \n\nclass Person extends Component {\n    constructor(props) {\n        super(props);\n        this.inputElementRef = React.createRef();\n    }\n\n    componentDidMount() {\n        console.log(\"[Person.js] componentDidMount...\");\n        // this.inputElement.focus();\n        // document.querySelector('input').focus();\n        this.inputElementRef.current.focus();\n    }\n    \n    render() {\n        console.log(\"[Person.js] rendering...\");\n        return (\n            // style vai dar override as css rules que tenho definidas para Person. O css faz isso e nao o radium\n            \n            // <div className={classes.Person}>\n            \n            // or use React.Fragment after importing Fragment from react. Its the same. Aux.js is how Fragment works under the hood\n            <Aux>\n                <AuthContext.Consumer>\n                    {(context) => {\n                        <p onClick={this.props.clicked}>\n                            Im a person with name: {this.props.name} and age: {this.props.age}\n                        </p>\n                    }}\n                </AuthContext.Consumer>\n                <p>{this.props.children}</p>\n                <input \n                    type=\"text\" \n                    onChange={this.props.changed} \n                    value={this.props.name}\n                    // o argumento que vou receber \"inputEl\" vai ser uma referencia para o elemento onde estou a meter isto, ou seja, o elemento input\n                    // ref={(inputEl) => {this.inputElement = inputEl}}/>\n                    ref={this.inputElementRef}\n                />\n            </Aux>\n            /* </div> */\n        )\n    }\n}\n\nexport default withClass(Person, classes.Person);  "]},"metadata":{},"sourceType":"module"}