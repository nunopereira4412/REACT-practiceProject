{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nunopereira/Desktop/js/react/project/src/components/Cockpit/Cockpit.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport classes from './cockpit.module.css';\n\nconst Cockpit = props => {\n  _s();\n\n  const toggleButtonRef = useRef(); // if there are dependencies specified, useEffect executes whenever a dependencie change.\n  // can use as many useEffect as i want, for different actions/readability\n  // the below useEffect will only execute upon mounting and unmounting. Cus there are no dependencies specificed, no dependencies will change meaning this will never execute again after the 1st time\n  //about return,\n  // if there is an empty array, [], meaning no dependencies specified,\n  // runs after they are updated - this will run BEFORE the main part of useEffect function runs but AFTER the 1st render cycle\n  // the return body here is useful if theres some operation that should be cancelled whenever the component re-renders\n  // if there is an array with dependencies in it, then it will do the above when those dependencies change \n  // if there is no array at all,\n  // runs every time\n  // for both cases, when the Cockpit component is removed, this is run\n\n  useEffect(() => {\n    // useState() - can do the same as getDerivedStrateFromProps\n    console.log(\"[Cockpit.js] useEffect 1\"); // setTimeout(() => {\n    //     alert(\"Saved data to the cloud\");\n    // }, 1000);\n\n    return () => {\n      console.log(\"[Cockpit.js] cleanup work in useEffect 1\");\n    };\n  }, []); // cus there are no dependencies array, this will run for every render of the Cockpit. Combines componentDidMount and componentDidUpdate\n\n  useEffect(() => {\n    console.log(\"[Cockpit.js] useEffect 2\");\n    return () => {\n      console.log(\"[Cockpit.js] cleanup work in useEffect 2\");\n    };\n  });\n  let buttonClasses = \"\";\n  if (props.showPersons) buttonClasses = classes.Red;\n  const assignedClasses = [];\n\n  if (props.personsLength <= 2) {\n    assignedClasses.push(classes.red);\n  }\n\n  if (props.personsLength <= 1) {\n    assignedClasses.push(classes.bold);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.Cockpit,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.appTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: assignedClasses.join(\" \"),\n      children: \"this is rly working\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: buttonClasses,\n      onClick: props.clicked,\n      ref: toggleButtonRef,\n      children: \"Toggle Persons\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}; // uses memoization, memoize = store a snapshot of this component, and only if its input changes react will re-render it. Otherwise, if this input doesnt change and some parent component wants to update the Cockpit then react will back that stored component\n\n\n_s(Cockpit, \"ZdZd5tCRA0r/26gNy9/ALMpQAVw=\");\n\n_c = Cockpit;\nexport default _c2 = /*#__PURE__*/React.memo(Cockpit);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Cockpit\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/nunopereira/Desktop/js/react/project/src/components/Cockpit/Cockpit.js"],"names":["React","useEffect","useRef","classes","Cockpit","props","toggleButtonRef","console","log","buttonClasses","showPersons","Red","assignedClasses","personsLength","push","red","bold","appTitle","join","clicked","memo"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,QAAuC,OAAvC;AACA,OAAOC,OAAP,MAAoB,sBAApB;;AAGA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAAA;;AAEvB,QAAMC,eAAe,GAAGJ,MAAM,EAA9B,CAFuB,CAIvB;AACA;AAEA;AAEA;AACI;AACI;AAEA;AAEJ;AAEA;AACI;AAEJ;;AAEJD,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAFY,CAGZ;AACA;AACA;;AACA,WAAO,MAAM;AACTD,MAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACH,KAFD;AAGH,GATQ,EASN,EATM,CAAT,CAtBuB,CAiCvB;;AACAP,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA,WAAO,MAAM;AACTD,MAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACH,KAFD;AAGH,GALQ,CAAT;AAOA,MAAIC,aAAa,GAAG,EAApB;AACA,MAAGJ,KAAK,CAACK,WAAT,EACID,aAAa,GAAGN,OAAO,CAACQ,GAAxB;AAEJ,QAAMC,eAAe,GAAG,EAAxB;;AACA,MAAGP,KAAK,CAACQ,aAAN,IAAuB,CAA1B,EAA6B;AAC3BD,IAAAA,eAAe,CAACE,IAAhB,CAAqBX,OAAO,CAACY,GAA7B;AACD;;AACD,MAAGV,KAAK,CAACQ,aAAN,IAAuB,CAA1B,EAA6B;AAC3BD,IAAAA,eAAe,CAACE,IAAhB,CAAqBX,OAAO,CAACa,IAA7B;AACD;;AAED,sBACI;AAAK,IAAA,SAAS,EAAEb,OAAO,CAACC,OAAxB;AAAA,4BACI;AAAA,gBAAKC,KAAK,CAACY;AAAX;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAG,MAAA,SAAS,EAAEL,eAAe,CAACM,IAAhB,CAAqB,GAArB,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAKI;AACI,MAAA,SAAS,EAAET,aADf;AAEI,MAAA,OAAO,EAAEJ,KAAK,CAACc,OAFnB;AAGI,MAAA,GAAG,EAAEb,eAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH,CApED,C,CAsEA;;;GAtEMF,O;;KAAAA,O;AAuEN,kCAAeJ,KAAK,CAACoB,IAAN,CAAWhB,OAAX,CAAf","sourcesContent":["import React, {useEffect, useRef} from 'react';\nimport classes from './cockpit.module.css';\n\n\nconst Cockpit = (props) => {\n\n    const toggleButtonRef = useRef();\n\n    // if there are dependencies specified, useEffect executes whenever a dependencie change.\n    // can use as many useEffect as i want, for different actions/readability\n    \n    // the below useEffect will only execute upon mounting and unmounting. Cus there are no dependencies specificed, no dependencies will change meaning this will never execute again after the 1st time\n\n    //about return,\n        // if there is an empty array, [], meaning no dependencies specified,\n            // runs after they are updated - this will run BEFORE the main part of useEffect function runs but AFTER the 1st render cycle\n\n            // the return body here is useful if theres some operation that should be cancelled whenever the component re-renders\n\n        // if there is an array with dependencies in it, then it will do the above when those dependencies change \n\n        // if there is no array at all,\n            // runs every time\n        \n        // for both cases, when the Cockpit component is removed, this is run\n\n    useEffect(() => {\n        // useState() - can do the same as getDerivedStrateFromProps\n        console.log(\"[Cockpit.js] useEffect 1\");\n        // setTimeout(() => {\n        //     alert(\"Saved data to the cloud\");\n        // }, 1000);\n        return () => {\n            console.log(\"[Cockpit.js] cleanup work in useEffect 1\");\n        };\n    }, []);\n\n    // cus there are no dependencies array, this will run for every render of the Cockpit. Combines componentDidMount and componentDidUpdate\n    useEffect(() => {\n        console.log(\"[Cockpit.js] useEffect 2\");\n        return () => {\n            console.log(\"[Cockpit.js] cleanup work in useEffect 2\");\n        };\n    });\n\n    let buttonClasses = \"\";\n    if(props.showPersons)\n        buttonClasses = classes.Red;\n\n    const assignedClasses = [];\n    if(props.personsLength <= 2) {\n      assignedClasses.push(classes.red);\n    }\n    if(props.personsLength <= 1) {\n      assignedClasses.push(classes.bold);\n    }\n\n    return (\n        <div className={classes.Cockpit}>\n            <h1>{props.appTitle}</h1>\n            <p className={assignedClasses.join(\" \")}>\n                this is rly working\n            </p>\n            <button \n                className={buttonClasses} \n                onClick={props.clicked}\n                ref={toggleButtonRef}\n            >\n                Toggle Persons\n            </button>\n        </div>\n    );\n}\n \n// uses memoization, memoize = store a snapshot of this component, and only if its input changes react will re-render it. Otherwise, if this input doesnt change and some parent component wants to update the Cockpit then react will back that stored component\nexport default React.memo(Cockpit);\n"]},"metadata":{},"sourceType":"module"}