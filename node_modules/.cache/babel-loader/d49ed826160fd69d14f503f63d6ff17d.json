{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nunopereira/Desktop/js/react/project/src/components/Cockpit/Cockpit.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport classes from './cockpit.module.css';\n\nconst Cockpit = props => {\n  _s();\n\n  // use Effect executes whenever a dependencie change.\n  // can use as many useEffect as i want, for different actions/readability\n  // this will only execute the 1st time. Cus there are no dependencies specificed, no dependencies will change meaning this will never execute again\n  // it executes on the 1st render and when unmounting/removing\n  useEffect(() => {\n    console.log(\"[Cockpit.js] useEffect 1\");\n    setTimeout(() => {\n      alert(\"Saved data to the cloud\");\n    }, 1000); // this will run BEFORE the main useEffect function runs but AFTER the 1st render cycle\n    // the return part runs only upon unmounting the Cockpit\n\n    return () => {\n      console.log(\"[Cockpit.js] cleanup work in useEffect 1\");\n    };\n  }, []); // just with the console.log it runs all the time. Combines componentDidMount and componentDidUpdate\n  // no dependencie array means the concole.log it will run for every re-render of Cockpit\n  // the return part runs only upon unmounting the Cockpit\n\n  useEffect(() => {\n    console.log(\"[Cockpit.js] useEffect 2\");\n    return () => {\n      console.log(\"[Cockpit.js] cleanup work in useEffect 2\");\n    };\n  }, [props.persons]);\n  let buttonClasses = \"\";\n  if (props.showPersons) buttonClasses = classes.Red;\n  const assignedClasses = [];\n\n  if (props.persons.length <= 2) {\n    assignedClasses.push(classes.red);\n  }\n\n  if (props.persons.length <= 1) {\n    assignedClasses.push(classes.bold);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.Cockpit,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.appTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: assignedClasses.join(\" \"),\n      children: \"this is rly working\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: buttonClasses,\n      onClick: props.clicked,\n      children: \"Toggle Persons\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Cockpit, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n\n_c = Cockpit;\nexport default Cockpit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cockpit\");","map":{"version":3,"sources":["/Users/nunopereira/Desktop/js/react/project/src/components/Cockpit/Cockpit.js"],"names":["React","useEffect","classes","Cockpit","props","console","log","setTimeout","alert","persons","buttonClasses","showPersons","Red","assignedClasses","length","push","red","bold","appTitle","join","clicked"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,OAAP,MAAoB,sBAApB;;AAGA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAAA;;AAEvB;AACA;AAEA;AACA;AACAH,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAC,IAAAA,UAAU,CAAC,MAAM;AACbC,MAAAA,KAAK,CAAC,yBAAD,CAAL;AACH,KAFS,EAEP,IAFO,CAAV,CAFY,CAMZ;AACA;;AACA,WAAO,MAAM;AACTH,MAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACH,KAFD;AAGH,GAXQ,EAWN,EAXM,CAAT,CAPuB,CAoBvB;AACA;AACA;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA,WAAO,MAAM;AACTD,MAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACH,KAFD;AAGH,GALQ,EAKN,CAACF,KAAK,CAACK,OAAP,CALM,CAAT;AAOA,MAAIC,aAAa,GAAG,EAApB;AACA,MAAGN,KAAK,CAACO,WAAT,EACID,aAAa,GAAGR,OAAO,CAACU,GAAxB;AAEJ,QAAMC,eAAe,GAAG,EAAxB;;AACA,MAAGT,KAAK,CAACK,OAAN,CAAcK,MAAd,IAAwB,CAA3B,EAA8B;AAC5BD,IAAAA,eAAe,CAACE,IAAhB,CAAqBb,OAAO,CAACc,GAA7B;AACD;;AACD,MAAGZ,KAAK,CAACK,OAAN,CAAcK,MAAd,IAAwB,CAA3B,EAA8B;AAC5BD,IAAAA,eAAe,CAACE,IAAhB,CAAqBb,OAAO,CAACe,IAA7B;AACD;;AAED,sBACI;AAAK,IAAA,SAAS,EAAEf,OAAO,CAACC,OAAxB;AAAA,4BACI;AAAA,gBAAKC,KAAK,CAACc;AAAX;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAG,MAAA,SAAS,EAAEL,eAAe,CAACM,IAAhB,CAAqB,GAArB,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAQ,MAAA,SAAS,EAAET,aAAnB;AAAkC,MAAA,OAAO,EAAEN,KAAK,CAACgB,OAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAnDD;;GAAMjB,O;;KAAAA,O;AAqDN,eAAeA,OAAf","sourcesContent":["import React, {useEffect} from 'react';\nimport classes from './cockpit.module.css';\n\n\nconst Cockpit = (props) => {\n\n    // use Effect executes whenever a dependencie change.\n    // can use as many useEffect as i want, for different actions/readability\n    \n    // this will only execute the 1st time. Cus there are no dependencies specificed, no dependencies will change meaning this will never execute again\n    // it executes on the 1st render and when unmounting/removing\n    useEffect(() => {\n        console.log(\"[Cockpit.js] useEffect 1\");\n        setTimeout(() => {\n            alert(\"Saved data to the cloud\");\n        }, 1000);\n        \n        // this will run BEFORE the main useEffect function runs but AFTER the 1st render cycle\n        // the return part runs only upon unmounting the Cockpit\n        return () => {\n            console.log(\"[Cockpit.js] cleanup work in useEffect 1\");\n        };\n    }, []);\n\n    // just with the console.log it runs all the time. Combines componentDidMount and componentDidUpdate\n    // no dependencie array means the concole.log it will run for every re-render of Cockpit\n    // the return part runs only upon unmounting the Cockpit\n    useEffect(() => {\n        console.log(\"[Cockpit.js] useEffect 2\");\n        return () => {\n            console.log(\"[Cockpit.js] cleanup work in useEffect 2\");\n        };\n    }, [props.persons]);\n\n    let buttonClasses = \"\";\n    if(props.showPersons)\n        buttonClasses = classes.Red;\n\n    const assignedClasses = [];\n    if(props.persons.length <= 2) {\n      assignedClasses.push(classes.red);\n    }\n    if(props.persons.length <= 1) {\n      assignedClasses.push(classes.bold);\n    }\n\n    return (\n        <div className={classes.Cockpit}>\n            <h1>{props.appTitle}</h1>\n            <p className={assignedClasses.join(\" \")}>this is rly working</p>\n            <button className={buttonClasses} onClick={props.clicked}>\n            Toggle Persons\n            </button>\n        </div>\n    );\n}\n \nexport default Cockpit;\n"]},"metadata":{},"sourceType":"module"}